#!/bin/bash
#
# aurvote : Tool to vote for favorite AUR packages
#
# Copyright (c) 2007-2010 Julien MISCHKOWITZ <wain@archlinux.fr>
# Copyright (c) 2011 tuxce <tuxce.net@gmail.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

NAME='aurvote'
VERSION=1.1

TMPDIR=${TMPDIR:-/tmp}
AV_TMP="$TMPDIR/aurvote-$USER"

CONFIGFILE=${XDG_HOME_CONFIG:-~/.config}/aurvote

AUR_URL="https://aur.archlinux.org"
AUR_URL_PKG_INFO="$AUR_URL/rpc.php"
AUR_URL_PKG_PAGE="$AUR_URL/packages.php?setlang=en&ID="
AUR_DOMAIN="aur.archlinux.org"
AUR_COOKIE="AURSID"


version() {
    echo "$NAME $VERSION"
}

usage() {
    echo "$NAME $VERSION"
    echo
    echo "usage: $0 <option> <pkgname1> <pkgname2> ..."
    echo
    echo " --version, -V       shows version"
    echo " --help,    -h       shows this help"
    echo " --check,   -c       check for voted packages"
    echo " --vote,    -v       vote for packages"
    echo " --unvote,  -u       unvote packages"
    echo
    echo "Configuration example : ($CONFIGFILE)"
    echo 'user="Aur user"'
    echo 'pass="Aur password"'
    echo 'COOKIE_FILE="Path to a persistent cookie file"'
    echo
}

error() {
    echo "Error: $*"
    exit 1
}

is_cookie_valid() {
    [[ -r $COOKIE_FILE ]] || return 1
    local expire
    expire=$(sed -ne '/^\(#HttpOnly_\|[^#]\)/ { s/#HttpOnly_//;p }' "$COOKIE_FILE" |
        awk "{ if (\$1==\"$AUR_DOMAIN\" && \$6==\"$AUR_COOKIE\") print \$5; }")
    [[ $expire ]] && { ((expire==0)) || ((expire>$(date +%s))); }
}

aur_login() {
    local args=()
    if ((PERSIST)); then
        is_cookie_valid && return 0
        args=(-d "remember_me=on")
    fi
    curl $CURL_OPT -fs -c "$COOKIE_FILE" "${args[@]}" -d "user=$user" \
         --data-urlencode "passwd=$pass" "$AUR_URL" \
         -o "$AV_TMP/login" || error "Unable to access $AUR_URL"
    err=$(sed -ne "s/.*span class='error'>\([^<]*\)<.*/\1/p" "$AV_TMP/login")
    [[ $err ]] && error "$err"
}

aur_ids() {
    local args=()
    set -- "${pkgnames[@]}"
    while [[ $1 ]]; do
        args+=(--data-urlencode "arg[]=$1")
        shift
    done
    curl $CURL_OPT -fs -G -d type=multiinfo "${args[@]}" \
         "$AUR_URL_PKG_INFO" -o "$AV_TMP/info.$PID" ||
             error "Unable to get IDs"
    pkgnames=($(grep -o '"ID":"[0-9]\+","Name":"[^"]\+"' "$AV_TMP/info.$PID" |
        sed 's/^"ID":"\([0-9]\+\)","Name":"\([^"]\+\)"$/\2\/\1/'))
}

aur_check_vote() {
    local pkg pkgname pkgid
    for pkg in "${pkgnames[@]}"; do
        pkgname=${pkg%%/*}
        pkgid=${pkg##*/}
        curl $CURL_OPT -fs -b "$COOKIE_FILE" \
             "${AUR_URL_PKG_PAGE}${pkgid}" \
             -o "$AV_TMP/$pkgname.$PID" ||
                 error "Unable to get $pkgname page"
        if grep -q "type='submit' class='button' name='do_UnVote'" "$AV_TMP/$pkgname.$PID"; then
            echo "already voted"
        elif grep -q "type='submit' class='button' name='do_Vote'" "$AV_TMP/$pkgname.$PID"; then
            echo "not voted"
        else
            echo "voted status not found"
        fi
    done
}


aur_vote() {
    local vote pkg pkgname pkgid
    (($1)) && vote="do_Vote" || vote="do_UnVote"
    for pkg in "${pkgnames[@]}"; do
        pkgname=${pkg%%/*}
        pkgid=${pkg##*/}
        curl $CURL_OPT -fs -b "$COOKIE_FILE" \
             -d "IDs[${pkgid}]=1&ID=${pkgid}&${vote}=1" \
             "${AUR_URL_PKG_PAGE}${pkgid}" -o /dev/null
        if (($?)); then
            echo "Error: Can't (un)vote for $pkgname"
        else
            echo "$pkgname : vote changed"
        fi
    done
}

### MAIN PROGRAM ###
umask 077
[[ -d "$AV_TMP" ]] || mkdir -p "$AV_TMP"
[[ -d "$AV_TMP" && -w "$AV_TMP" ]] || error "Cannot access to $AV_TMP"
PID=$$
ACTION="vote"
IDMODE=0
pkgnames=()
CURL_OPT=""
PERSIST=0

[[ -r "$CONFIGFILE" ]] && source "$CONFIGFILE" ||
    error "Unable to parse $CONFIGFILE"

[[ $COOKIE_FILE ]] && PERSIST=1

while [[ $1 ]]; do
    case $1 in
        --help|-h)    usage; exit 0;;
        --version|-V) version; exit 0;;
        --check|-c)   ACTION="check";;
        --vote|-v)    ACTION="vote";;
        --unvote|-u)  ACTION="unvote";;
        # IDMODE is designed to be used with yaourt: aur -c --id packagename/aurid
        --id)         IDMODE=1;; 
        --insecure)   CURL_OPT+=" --insecure";; 
        -k)           PERSIST=1; shift; COOKIE_FILE="$1";;
        --*|-*)       usage; exit 1;;
        *)            pkgnames+=("$1");;
    esac
    shift
done
COOKIE_FILE=${COOKIE_FILE:-"$AV_TMP/cookies"}

[[ ! $pkgnames ]] && usage && exit 1
 
aur_login
((! IDMODE)) && aur_ids

case "$ACTION" in
    check)  aur_check_vote;;
    vote)   aur_vote 1;;
    unvote) aur_vote 0;;
esac

